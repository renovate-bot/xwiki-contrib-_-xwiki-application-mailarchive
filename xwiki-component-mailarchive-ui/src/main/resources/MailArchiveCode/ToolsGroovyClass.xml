<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>MailArchiveCode</web>
<name>ToolsGroovyClass</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.jbousque</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1319529712000</creationDate>
<date>1336902164000</date>
<contentUpdateDate>1336902164000</contentUpdateDate>
<version>1.1</version>
<title>Mail Archive Utility Class</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>Imported from XAR</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<content>/* Groovy Class #* */

class Tools {

    /** createWikiUserFromLdap
      * Creates a user profile in wiki, searching for information from LDAP given an email address (ID-Type mail header format).
      * Testings will be done to check if a matching profile already exists or not.
      * If "confirm" is false, searches will be done but no profile creation/update will be done.
      * If "updateMode" is false, only profiles creations will be done (no udpates of existing profiles).
      * If a matching profile to create/update was found, returns the name of the profile page.
      * Returns null in any other case.
     */
    def createWikiUserFromLdap(String idtype, boolean confirm, boolean updateMode) {
     def create = false
     def update = false
     def profile = ""
     def mail = parseMailAddress(idtype)
     def parsedUser = searchWikiUserFromIdType(idtype)
     if (parsedUser != null &amp;&amp; parsedUser.size() == 0 ) { parsedUser = null }
     if (parsedUser == null) {    
       if (!confirm) {
         println '(% style="color:black" %)'
         println "${mail} : Not found in wiki profiles"
       }
     } else {
       println '(% style="color:black" %)'
       println "${mail}: wiki profile already exists: ${parsedUser}"
     }
     luser = LDAPUser.searchLDAPUserByMail(mail, ldaputils)
     if (luser == null) {
       def newmail = mail
       if (newmail.toUpperCase().contains("-EXTERNAL")) {
         newmail = newmail.replaceAll(~/(.*)-EXTERNAL(.*)/, "\$1\$2")
       } else {
         newmail = newmail.replaceAll(~/(.*)@(.*)/, "\$1-external@\$2")
       }
       luser = LDAPUser.searchLDAPUserByMail(newmail, ldaputils)
     }
     if (luser != null) {        
        def foundWikiProfileWithSameUid = false
        if (parsedUser != null) {
          parsedUser.each() { user -&gt;
             if (luser.uid == user.replaceAll(~/XWiki[.](.*)/, "\$1")) {
                foundWikiProfileWithSameUid = true
             }
          }
          if (!foundWikiProfileWithSameUid) {
            if (!confirm) {
              println '(% style="color:red" %)'
              println "~ ~ ~ ~ ${luser.uid}: FOUND from LDAP with email but name different than wiki profile(s) ${parsedUser} "
            }
            create = true
            profile = "XWiki.${luser.uid}"
            if (!confirm) {
              println '(% style="color:green" %)'
              println "~ ~ ~ ~ ${luser.uid}: profile ${profile} to create"
            }
          } else if (updateMode) {
            update = true
            profile = "XWiki.${luser.uid}"
            if (!confirm) {
              println '(% style="color:green" %)'
              println "~ ~ ~ ~ ${luser.uid}: FOUND from LDAP with email, profile ${profile} to update"
            }
          }
        } else {
          create = true
          profile = "XWiki.${luser.uid}"
          if (!confirm) {
            println '(% style="color:green" %)'
            println "~ ~ ~ ~ ${luser.uid}: FOUND from LDAP with email, profile ${profile} to create"
          }
        }
     } else {
        println '(% style="color:red" %)'
        println "~ ~ ~ ~ ${mail}: NOT FOUND from LDAP"
     }

     if (create || update) {
        def userDoc = xwiki.getDocument(profile)
        try {
          //TODO : add all attributes that are mapped to xwiki profiles fields ...
          def attributes = ldaputils.searchUserAttributesByUid(userDoc.name, ldaputils.getAttributeNameTable(xcontext.getContext()))
          def DN = ldaputils.searchUserDNByUid(userDoc.name)
          if (create) {
            if (confirm) {
              ldaputils.createUserFromLDAP(userDoc.getDocument(), attributes, DN, userDoc.name, xcontext.getContext())
              println '(% style="color:green" %)'
              println "Wiki profile created for ${userDoc.name}"
            } else {
              println '(% style="color:blue" %)'
              println "~ ~ ~ ~ ~ ~ User to create from LDAP with id ${userDoc.name}, DN ~[${DN}~], attrs ~[${attributes}~] ..."
            }
          } else if (update &amp;&amp; updateMode) {
            if (confirm) {
              ldaputils.updateUserFromLDAP(userDoc.getDocument(), attributes, DN, userDoc.name, xcontext.getContext())
              println '(% style="color:green" %)'
              println "Wiki profile updated for ${userDoc.name}"
            } else {
              println '(% style="color:blue" %)'
              println "~ ~ ~ ~ ~ ~ User to update from LDAP with id ${userDoc.name}, DN ~[${DN}~], attrs ~[${attributes}~] ..."
            }
          }
          return userDoc.name

        } catch (Throwable t) {
          println '(% style="color:red" %)'
          println "~ ~ ~ ~ Exception while creating profile : ${t.message} ${t}"
          t.printStackTrace()

          return null
        }
     }
     return null
   }

    /** searchWikiUserFromIdType
      * Parses an ID-type (email field) user string of the form "user &lt;usermail@com&gt;"
      * - if mail address matched in xwiki user profiles, returns page name for this profile
      * - returns null string if no match is found
      * - tries to return profile of a user that's authenticated from LDAP, if any, or else first profile found
     */
    String searchWikiUserFromIdType (user) {
      def mail = parseMailAddress(user)
      return searchWikiUserFromMail(mail)
    }

    /** searchWikiUserFromMail
      * - if mail address matched in xwiki user profiles, returns page name for this profile
      * - returns null string if no match is found
      * - tries to return profile of a user that's authenticated from LDAP, if any, or else first profile found
     */
    String searchWikiUserFromMail (mail) {
      def parsedUser = null
      if (mail != "") {
        // to match "-external" emails and old mails with '@gemplus.com'...
        mail = mail.toLowerCase()
        mail = mail.replaceAll(~/^([^-]*)(?:-.*)?@.*[.]com$/, "\$1%@%.com")   
        // Try to find a wiki profile with this email as parameter.
        def hql = "select obj.name from BaseObject as obj, StringProperty as prop where obj.className='XWiki.XWikiUsers' and obj.id=prop.id and prop.name='email' and LOWER(prop.value) like '" + mail + "'"

        def wikiuser = xwiki.search(hql)
        if (wikiuser != null &amp;&amp; wikiuser.size() == 0) {
          return null
        } else {
          // If there exists one, we prefer the user that's been authenticated through LDAP
          wikiuser.each() { usr -&gt;
            if (xwiki.getDocument(usr).getObject('XWiki.LDAPProfileClass') != null){
              parsedUser = usr
            }
          }
        }
        if (parsedUser != null) {
          return parsedUser
        } else {
          // If none has authenticated from LDAP, we return the first user found
          return wikiuser[0]
        }
      } else {
        return null;
      }
    }

  /** parseMailAddress 
      Parses an ID-type mail header ('from', 'cc'...), and returns an email address.
      If format is invalid, returns the input string unchanged.
  */
  String parseMailAddress(id) {
    def start = id.indexOf('&lt;')
    def end = id.indexOf('&gt;')
    if (start!=-1 &amp;&amp; end!=-1) {
      return id.substring(start+1, end)
    } else {
      return id
    }
  }

}

/* #* */</content></xwikidoc>
