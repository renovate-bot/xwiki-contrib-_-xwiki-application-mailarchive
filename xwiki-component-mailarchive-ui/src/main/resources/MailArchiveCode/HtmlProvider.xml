<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>MailArchiveCode</web>
<name>HtmlProvider</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.jbousque</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1264058144000</creationDate>
<date>1338298830000</date>
<contentUpdateDate>1338298830000</contentUpdateDate>
<version>2.6</version>
<title>Provides HTML to be displayed in mail messages</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>true</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator>|</separator>
<separators>|,</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>MailArchiveCode.HtmlProvider</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>bac8807b-90eb-4b6a-9b21-c439caf05fb0</guid>
<property>
<tags/>
</property>
</object>
<content>{{groovy}}
import java.util.zip.GZIPInputStream
import java.util.regex.Pattern

def page = request.page
def cut = request.getParameter("cut")
if (cut != null &amp;&amp; cut != "") {
  cut = true
} else {
  cut = false
}
if (page != null &amp;&amp; page != "") {
  def htmldoc = xwiki.getDocument(page)
  if (htmldoc != null) {
    def htmlobj = htmldoc.getObject('MailArchiveCode.MailClass')
    if (htmlobj != null) {
      def ziphtml = htmlobj.getProperty('bodyhtml')
      if (ziphtml != null &amp;&amp; !ziphtml.getValue().isEmpty())
      {
        ziphtml = ziphtml.getValue()

        def zis = new GZIPInputStream(new ByteArrayInputStream(hex2byte(ziphtml)))
        def html = ""
        if (zis != null) 
        {
          StringBuilder sb = new StringBuilder();
          String line; 
          try 
          {
            BufferedReader reader = new BufferedReader(new InputStreamReader(zis, "UTF-8"));
            while ((line = reader.readLine()) != null) 
            {
              sb.append(line).append("\n");
            }
          } finally 
          {
            zis.close();
          }
          html = sb.toString();
        }     
        def m = Pattern.compile(/&lt;span [^&gt;]*&gt;From:&lt;\/span&gt;/, Pattern.MULTILINE).matcher(html)
        if (cut &amp;&amp; m.find()) {
          html = html[0..m.start()-1]
        } else if (cut &amp;&amp; html.contains("&lt;b&gt;From:&lt;/b&gt;")) {
          html = html[0..html.indexOf("&lt;b&gt;From:&lt;/b&gt;")-1]
        }
        

        println ("{{html clean='false' wiki='false'}}" + html + "{{/html}}")

      // body is only plain text
      } else 
      {
        def body = htmlobj.getProperty('body')
        if (body != null &amp;&amp; !body.getValue().isEmpty())
        {
          body = body.getValue()
          if (cut &amp;&amp; body.contains("-----Original Message-----")) {
            body = body[0..body.indexOf("-----Original Message-----")-1]
          } 
          println("(% style=\"width:500px;\" %){{code language=\"none\"}}" + body + "{{/code}}")
        }
      }
    } 

  }
}



    private byte charToByte(char c){
        return (byte) "0123456789ABCDEF".indexOf(""+c);
    }

    /**
     * BD : Used to transfer hex string into byte array. two hex string combines one byte. So that means the length of hex string
     *      should be even. Or the null will be returned.
     * @param hexStr
     * @return
     */
    public byte[] hex2byte(String hexStr) {
        if(hexStr == null || hexStr.isEmpty() || (hexStr.length()%2&gt;1)) {
            return null;
        }
        String hexStrUp = hexStr.toUpperCase();
        int length = hexStrUp.length()/2;
        char[] hexChars = hexStrUp.toCharArray();
        byte[] resultByte = new byte[length];
        for(int i=0;i&lt;length;i++) {
            int pos = i*2;
            resultByte[i] = (byte) (charToByte(hexChars[pos]) &lt;&lt; 4 | charToByte(hexChars[pos+1]));            
        }
        return resultByte;
    }

    /**
     * BD : Used to transfer byte array into hex string.
     * @param b
     * @return
     */
    public String byte2hex(byte[] b){
        StringBuffer hexStr= new StringBuffer("");
        String stmp = "";
        for(int i=0;i&lt;b.length;i++) {
            stmp = (java.lang.Integer.toHexString(b[i] &amp; 0xFF));
            if(stmp.length() == 1) {
                hexStr.append("0"+stmp);
            } else {
                hexStr.append(stmp);
            }            
        }
        return hexStr.toString().toUpperCase();
    }
{{/groovy}}</content></xwikidoc>
