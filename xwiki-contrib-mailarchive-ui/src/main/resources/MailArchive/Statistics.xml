<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>MailArchive</web>
<name>Statistics</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>MailArchive.WebHome</parent>
<creator>XWiki.jbousque</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1265126554000</creationDate>
<date>1348657300000</date>
<contentUpdateDate>1348657300000</contentUpdateDate>
<version>4.1</version>
<title>GGS WW Mailing-lists Statistics</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator>|</separator>
<separators>|,</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>MailArchive.Statistics</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>ac89744d-a885-48a4-9278-39aca737ec9a</guid>
<property>
<tags/>
</property>
</object>
<content>{{info}}Please note that these statistics are based on //counts// of mails and topics, and can't be used to evaluate the //quality// of mails and topics ;-){{/info}}

{{velocity}}
#set($prefsdoc = $xwiki.getDocument('MailArchivePrefs.GlobalParameters'))
#set($prefs = $prefsdoc.getObject('MailArchiveCode.AdminClass'))
#set($full = $request.full)
#set($restrict = $request.restrict)
#set($nbitemstoshow = 0)
#if (!$full)
  #set($nbitemstoshow = 10)
#end
#if (!$restrict) 
  #set($restrict = "All")
#end
#set($linksstr = "**Limit view to**: ")
#if($restrict == "All")
  #set($linksstr = "$linksstr __**All DLs**__")
#else
  #set($linksstr = "$linksstr [[All DLs&gt;&gt;${doc.web}.${doc.name}?full=${full}]]")
#end
#set($listsdoc = $xwiki.getDocument('MailArchive.ListsSettings'))
#set($listsobjs = $listsdoc.getObjects('MailArchiveCode.ListsSettingsClass'))
#foreach($obj in $listsobjs)
  #set($restrictfilter = $obj.get('Tag'))
  #set($restrictdisplay = $obj.get('displayname'))
  #set($linksstr = "$linksstr - ")
  #if($restrict == $restrictfilter)
    #set($linksstr = "$linksstr __**${restrictdisplay}**__")
  #else
    #set($linksstr = "$linksstr [[${restrictdisplay}&gt;&gt;${doc.web}.${doc.name}?restrict=${restrictfilter}&amp;full=${full}]]")
  #end
#end
## List of DL tags
#set($xwql = "select list.Tag, list.displayname, list.color from Document doc, doc.object(MailArchiveCode.ListsSettingsClass) as list where doc.name not like '%Sheet' and doc.name not like '%Template' order by list.displayname asc")
#set($tagslist = $services.query.xwql($xwql).execute())
#foreach($tagitem in $tagslist)
  #if($tagitem[0] == $restrict)
    #set($listtag = $tagitem[0])
    #set($listdisplay = $tagitem[1])
    #set($listcolor = $tagitem[2])
  #end
#end

$linksstr

##displayAllTimeActivity()

## Number of posts without answer
#set($xwql = "select count(mail.topicid) from Document doc, doc.object(MailArchiveCode.MailClass) as mail, doc.object(XWiki.TagClass) as tag where mail.name = tag.name and doc.space&lt;&gt;'MailArchiveCode'")
#if($restrict != "All")
  #set($xwql = "$xwql and :tagvalue MEMBER OF tag.tags ")
#end
#set($xwql = "$xwql group by mail.topicid having (count(mail.topicid) = 1)")
#set($query = $services.query.xwql($xwql))
#if($restrict != "All")
  #set($query = $query.bindValue("tagvalue", $restrict))
#end
#set($results = $query.execute())
#set($nbUnansweredPosts = $results.size())

## Number of posts with an answer
#set($xwql = "select count(mail.topicid) from Document doc, doc.object(MailArchiveCode.MailClass) as mail, doc.object(XWiki.TagClass) as tag where mail.name = tag.name and doc.space&lt;&gt;'MailArchiveCode'")
#if($restrict != "All")
  #set($xwql = "$xwql and :tagvalue MEMBER OF tag.tags ")
#end
#set($xwql = "$xwql group by mail.topicid having (count(mail.topicid) &gt; 1)")
#set($query = $services.query.xwql($xwql))
#if($restrict != "All")
  #set($query = $query.bindValue("tagvalue", $restrict))
#end
#set($results = $query.execute())
#set($nbAnsweredPosts = $results.size())

## Total Number of posts
#set($nbTotalPosts = $nbUnansweredPosts + $nbAnsweredPosts)

Total number of posts : $nbTotalPosts

{{container layoutStyle="columns"}}

(((
{{chart type="pie" source="inline" params="range:B1-B2;series:columns;" title="Answered posts" height="200"}}
|Posts without answer=${nbUnansweredPosts}|${nbUnansweredPosts}
|Answered Posts=${nbAnsweredPosts}|${nbAnsweredPosts}
{{/chart}}
)))

{{/container}}

#set($xwql = "select count(topic.author) from Document doc, doc.object(MailArchiveCode.MailTopicClass) as topic where doc.space&lt;&gt;'MailArchiveCode'")
#if($restrict != "All")
  #set($xwql = "$xwql and :tagvalue MEMBER OF tag.tags ")
#end
#set($xwql = "$xwql group by topic.author") ## order by count(topic.author) desc")
#set($query = $services.query.xwql($xwql))
#if($restrict != "All")
  #set($query = $query.bindValue("tagvalue", $restrict))
#end
#set($results = $query.setLimit($nbitemstoshow).execute())

{{container layoutStyle="columns"}}
(((
#if ($results.size() &gt; 0) 
== Top Posters ==
(posters are creators of new discussion threads - not newsletters)
|=Person|=Threads
  #foreach($result in $results)
    #set($author = $result[1])
    #if(!$author)
      #set($author = "unknown")
    #end
    #parseUser($author)
    #set($wikiUser = $parsedUser)
    #if (!$wikiUser) 
      #set($index = $author.indexOf('&lt;'))
      #if($index != -1)
        #set($wikiUser = $author.substring(0,$index)) 
      #end
    #else
      #set($prettyName = $xwiki.getLocalUserName($wikiUser, false))
      #set($wikiUser = "{{useravatar username='${wikiUser}' width='30'/}} [[${prettyName}&gt;&gt;MailArchive.ViewUserMessages?user=${author}&amp;wikiUser=wikiUser]]")
    #end
|${wikiUser}|${result[0]}
  #end
#else
  No data
#end
)))

#set($sql = "select count(prop.value) as nbPosts, 
                prop.value 
           from BaseObject as obj, 
                LargeStringProperty as prop,
                StringProperty as proptype")
#if ($restrict!="All")
  #set($sql = "$sql,
                BaseObject as objtag, 
                DBStringListProperty as tags, IN(tags.list) tagsvalue")
#end
#set($sql = "$sql
          where obj.className='MailArchiveCode.MailClass' 
                and prop.id=obj.id and prop.name='from'
                and proptype.name='type' and proptype.id=obj.id and proptype.value='Mail'")
#if ($restrict!="All")
  #set($sql = "$sql
                and objtag.className='XWiki.TagClass'
                and objtag.name=obj.name
                and tags.id.id=objtag.id and tags.id.name='tags'
                and tagsvalue='$restrict'") 
#end
#set($sql = "$sql
       group by prop.value 
       order by count(prop.value) desc")

#set($results = $xwiki.search($sql, $nbitemstoshow, 0))

(((
#if ($results.size() &gt; 0)
== Top Contributors ==
(contributors consider all mails sent except newsletters)
|=Person|=Messages
  #foreach($result in $results)
    #set($author = $result[1])
    #if (!$author)
      #set($author="unknown")
    #end
    #parseUser($author)
    #set($wikiUser = $parsedUser)
    #if (!$wikiUser) 
      #set($index = $author.indexOf('&lt;'))
      #if($index &gt; 0)
        #set($wikiUser = $author.substring(0,$index))
      #end
    #else
      #set($prettyName = $xwiki.getLocalUserName($wikiUser, false))
      #set($wikiUser = "{{useravatar username='${wikiUser}' width='30'/}} [[${prettyName}&gt;&gt;MailArchive.ViewUserMessages?user=${author}&amp;wikiUser=wikiUser]]")
    #end
|${wikiUser}|${result[0]}
  #end
#else
  No data
#end
)))
{{/container}}

[[Show complete stats&gt;&gt;${doc.web}.${doc.name}?restrict=${restrict}&amp;full=true]] - [[View only top ten&gt;&gt;${doc.web}.${doc.name}?restrict=${restrict}&amp;full=null]]

== Mails Distribution ==

#set($sql = "select count(tagsvalue), tagsvalue, str2.value
             from BaseObject as obj,
                  DBStringListProperty as tags, IN(tags.list) tagsvalue,
                  StringProperty str1, StringProperty str2
            where obj.className='XWiki.TagClass' 
                  and obj.name like 'MailArchive.T%'
                  and tags.id.id=obj.id  and tags.id.name='tags'
                  and tagsvalue in (select settings.value
                                     from  BaseObject as objsettings,
                                           StringProperty as settings
                                    where  objsettings.className='MailArchiveCode.ListsSettingsClass'
                                           and objsettings.id=settings.id 
                                           and settings.name='Tag')
                  and str1.id=str2.id and str1.name='Tag' and str1.value=tagsvalue and str2.name='displayname'
        group by  tagsvalue")
#set($results = $xwiki.search($sql, 0, 0))
#set($nb = $results.size())
#if ($results.size()&gt;0) 
{{chart type="pie" source="inline" params="range:B1-B${nb};series:columns;" title="Mails distribution" height="600" width="800"}}
  #foreach($result in $results)
|${result[2]}=${result[0]}|${result[0]}
  #end
{{/chart}}
#end

## Topics types : Newsletters, product releases, ...
#set($sql = "select count(prop.name),prop.value
               from BaseObject as obj, StringProperty as prop
              where prop.name = 'type' and obj.id=prop.id and obj.className='MailArchiveCode.MailTopicClass'
           group by prop.value")
#set($results = $xwiki.search($sql, 0, 0))
#set($nb = $results.size())
#if ($nb &gt; 0) 
{{chart type="pie" source="inline" params="range:B1-B${nb};series:columns;" title="Topics Types" height="600" width="800"}}

  #foreach($result in $results)
|${result[1]}=${result[0]}|${result[0]}
  #end
{{/chart}}
#end

##
## Parses a user string of the form "user &lt;usermail@com&gt;"
##   - extract mail and if matched in xwiki user profiles, returns page name for this profile
##   - returns null string if no match is found
##
#macro (parseUser $user)
  #set($start = $user.indexOf('&lt;'))
  #set($end = $user.indexOf('&gt;'))
  #set($mail = "")
  #if ($start!=-1 &amp;&amp; $end != -1)
    #set($begin = $start + 1)
    #set($mail = $user.substring($begin, $end).toLowerCase())
  #end
  #if ($mail != "")
    #set($hql = "select obj.name from BaseObject as obj, StringProperty as prop where obj.className='XWiki.XWikiUsers' and obj.id=prop.id and prop.name='email' and LOWER(prop.value) ='${mail}'")
    #set($wikiuser = $xwiki.search($hql))
    #if($wikiuser.size() &gt; 0)
      #set($parsedUser = $wikiuser[0])
    #else
      #set($parsedUser = $xwiki.null)
    #end
  #else
    #set($parsedUser = $xwiki.null)
  #end
#end

##
## ***** ALL TIME ACTIVITY ***** ##
##
#macro(displayAllTimeActivity )
  ## ***** Query info from database *****
  #set($hql = "select year(dateprop.value), month(dateprop.value), count(mailobj) from BaseObject as mailobj, DateProperty as dateprop where mailobj.className='MailArchiveCode.MailClass' and mailobj.id=dateprop.id and dateprop.name='date' group by year(dateprop.value), month(dateprop.value) order by year(dateprop.value), month(dateprop.value)")
  #set($alltimemails = $services.query.hql($hql).execute())
  #set($nballtimemails = $alltimemails.size())
  #set($hql = "select year(dateprop.value), month(dateprop.value), count(topicobj) from BaseObject as topicobj, DateProperty as dateprop where topicobj.className='MailArchiveCode.MailTopicClass' and topicobj.id=dateprop.id and dateprop.name='startdate' group by year(dateprop.value), month(dateprop.value) order by year(dateprop.value), month(dateprop.value)")
  #set($alltimetopics = $services.query.hql($hql).execute())
  #set($nballtimetopics = $alltimetopics.size())

  #set($allmails = {})
  #foreach($result in $alltimemails)
    #set($discard = $allmails.put("${result[0]}-${result[1]}", "$result[2]"))
  #end
  #set($alltopics = {})
  #foreach($result in $alltimetopics)
    #set($discard = $alltopics.put("${result[0]}-${result[1]}", "$result[2]"))
  #end
  ## ***** Compute number of months that will be displayed ****
  #set($now = $xwiki.jodatime.dateTime)
  #set($yearStart = $alltimemails[0][0])
  #set($last = $alltimemails.size() - 1)
  #set($yearEnd = $alltimemails[$last][0])
  #set($count=0)
  #foreach ($year in [$yearStart..$yearEnd])
    #if($year == $yearStart)
      #set($monthStart = $alltimemails[0][1])
    #else
      #set($monthStart = 1)
    #end
    #if($year == $yearEnd)
      #set($monthEnd = $alltimemails[$last][1])
    #else
      #set($monthEnd = 12)
    #end
    #foreach ($month in [$monthStart..$monthEnd])
      #set($count = $count + 1)
    #end
  #end
  #set($count = $count + 1)

  ## ***** Display chart *****
{{chart source="inline" type="line" params="range:B2-C${count};series:columns;" title="Activity : ${yearStart}/$alltimemails[0][1] - ${yearEnd}/$alltimemails[$last][1]" height="500" width="800"}}
|=Date|=Topics Count|=Mails Count
  #foreach ($year in [$yearStart..$yearEnd])
    #if($year == $yearStart)
      #set($monthStart = $alltimemails[0][1])
    #else
      #set($monthStart = 1)
    #end
    #if($year == $yearEnd)
      #set($monthEnd = $alltimemails[$last][1])
    #else
      #set($monthEnd = 12)
    #end
    #foreach ($month in [$monthStart..$monthEnd])
      #if($allmails.get("${year}-${month}"))
        #set($nbmail = $allmails.get("${year}-${month}"))
      #else
        #set($nbmail = 0)
      #end
      #if($alltopics.get("${year}-${month}"))
        #set($nbtopic = $alltopics.get("${year}-${month}"))
      #else
        #set($nbtopic = 0)
      #end
|${year}-${month}|${nbtopic}|${nbmail}
    #end
  #end
{{/chart}}
#end




{{/velocity}}

{{groovy}}
// Check if "city" field exists in user class
def userClass = xwiki.getDocument('XWiki.XWikiUsers').getxWikiClass()
if (userClass.propertyNames.contains('city')) {
def xwql = """select user.city, count(user.city) from Document as doc, doc.object(XWiki.XWikiUsers) as user group by user.city"""
results = services.get("query").xwql(xwql).execute()
def laciotat = 0
println results.class
def newresults = []
results.each() { result -&gt;
  if (result[0].toUpperCase().contains("CIOTA")) {
     laciotat += result[1]
  } else if (result[0] == "") {
    result[0] = "&lt;unknown&gt;"
    newresults += result
  } else {
    newresults += result
  }
}
results = newresults
results.add(["La Ciotat - La Vigie",laciotat])
nb = results.size()

println('{{chart type="pie" source="inline" params="range:B1-B'+nb+';series:columns;" title="Posters Localization" height="600" width="800"}}')

if (results.size()&gt;0) {
  results.each() { result -&gt;
    println("|${result[0]}=${result[1]}|${result[1]}")
  }
}
println "{{/chart}}"
}

{{/groovy}}</content></xwikidoc>
