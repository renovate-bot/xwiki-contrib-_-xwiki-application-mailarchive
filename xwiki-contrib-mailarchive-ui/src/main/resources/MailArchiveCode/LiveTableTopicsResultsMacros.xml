<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>MailArchiveCode</web>
  <name>LiveTableTopicsResultsMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>MailArchiveCode.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1353417891000</creationDate>
  <date>1353417891000</date>
  <contentUpdateDate>1353417891000</contentUpdateDate>
  <version>1.1</version>
  <title>$msg.get("xe.livetable.resultsmacros")</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.TagClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <tags>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>tags</name>
        <number>1</number>
        <prettyName>Tags</prettyName>
        <relationalStorage>1</relationalStorage>
        <separator>|</separator>
        <separators>|,</separators>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <values/>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </tags>
    </class>
    <name>MailArchiveCode.LiveTableTopicsResultsMacros</name>
    <number>0</number>
    <className>XWiki.TagClass</className>
    <guid>330504ac-33b4-4ea2-9fe0-4eff5d3d1e8c</guid>
  </object>
  <content>{{velocity}}
##
## Macro to get the results of a grid data call
##
##
#macro(gridresult $className $collist)
 #gridresultwithfilter($className $collist "" "")
#end
#**
  * Macro to get the results of a grid data call
  *#
##
#macro(gridresultwithfilter $className $collist $filterfrom $filterwhere)
## ============================================================================================
## This page is called from live grids via Ajax with the argument xpage=plain. It returns a
## set of results serialized in JSON.
## ============================================================================================
#if ($request.get("xpage") &amp;&amp; $request.get("xpage") == "plain")
  #set( $offset = $util.parseInt( $request.get( "offset" ) ) )
  ## offset starts from 0 in velocity and 1 in javascript
  #set( $off = $offset - 1 )
  #set( $limit = $util.parseInt( $request.get( "limit" ) ) )
  #set($tablelist = $util.arrayList)

  #set($whereSql = "")
  ## 
  ## Exclude Blacklisted spaces ($blacklistedSpaces is set in xwikivars.vm)
  ##
  #foreach ($blacklistedSpace in $blacklistedSpaces)
    #set ($whereSql = "${whereSql} and doc.space &lt;&gt; '$blacklistedSpace'")
  #end

  #set($fromSql = "")
  #set($class = $xwiki.getDocument($className).getxWikiClass())

  #foreach($colname in $collist)
  #grid_addcolumn($colname)
  #end

  ## tags
  #if($request.tag)
    #set($fromSql = "${fromSql} , BaseObject as tobject, DBStringListProperty as tagprop")
    #set($whereSql = "${whereSql} and tobject.className='XWiki.TagClass' and tobject.name=doc.fullName and tobject.id=tagprop.id.id and tagprop.id.name='tags' and (")
    #foreach($tag in $request.getParameterValues("tag"))
      #if($velocityCount &gt; 1) #set($whereSql = "${whereSql} and ") #end
      #set($whereSql = "${whereSql} '$tag' in elements(tagprop.list)")
    #end
    #set($whereSql = "${whereSql} )")
  #end

  ## order
  #set($order="$!request.sort")
  #if($order!="")
    #set($orderDirection = "$!request.dir")
    #if($order=="description")
      #set($tablealias = "dtable")
    #else
     #set($tablealias = $order)
    #end
    #if($order.startsWith("doc."))
      #set($orderSql = " order by ${tablealias.replace('_','.')} ${orderDirection}")  
    #elseif($tablelist.contains($tablealias))
      #set($orderSql = " order by ${tablealias}.value ${orderDirection}")  
    #elseif($order=="averagevote")
      #grid_gettablename($order)
      #set($fromSql = "${fromSql}, BaseObject as objratings, ${tableName} ${tablealias}")
      #set($whereSql = "${whereSql} and doc.fullName=objratings.name and objratings.className='XWiki.AverageRatingsClass' and objratings.id=${tablealias}.id.id and ${tablealias}.name='${order}'")
      #set($orderSql = " order by ${tablealias}.value ${orderDirection}")
    #else
      #set($multiselect = $class.get($order).getProperty("multiSelect").getValue())
        #if("$multiselect"!="1")
          #grid_gettablename($order)
          #set($fromSql = "${fromSql}, ${tableName} ${tablealias}")
          #set($whereSql = "${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${order}'")  
          #set($orderSql = " order by ${tablealias}.value ${orderDirection}")  
        #end
      #end
    #end
 
  #if("$!className" != "")
    #set($countSql = ", BaseObject as obj $!fromSql $!filterfrom where obj.name=doc.fullName and obj.className='${className}' and doc.fullName&lt;&gt;'${className}Template' $!whereSql $!filterwhere")
    #set($tagsMatchingFiltersFrom = ", BaseObject as obj $!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "obj.name=doc.fullName and obj.className='${className}' and doc.fullName&lt;&gt;'${className}Template' $!whereSql $!filterwhere")
    #set($allMatchingTagsFrom = ", BaseObject as obj $!filterfrom")
    #set($allMatchingTagsWhere = "obj.name=doc.fullName and obj.className='${className}' and doc.fullName&lt;&gt;'${className}Template' $!filterwhere")  
  #else
    #set($countSql = "$!fromSql $!filterfrom where 1=1 $!whereSql $!filterwhere")
    #set($tagsMatchingFiltersFrom = "$!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "1=1 $!whereSql $!filterwhere")
    #set($allMatchingTagsFrom = "$!filterfrom")
    #set($allMatchingTagsWhere = "1=1 $!filterwhere")
  #end
  #set($tagsMatchingFilters = $xwiki.tag.getTagCountForQuery($tagsMatchingFiltersFrom, $tagsMatchingFiltersWhere))
  #set($allMatchingTags = $xwiki.tag.getTagCountForQuery($allMatchingTagsFrom, $allMatchingTagsWhere))
  #set($sql = "$countSql $!{orderSql}")
  #set($items = $xwiki.searchDocuments($sql, $limit, $off))
  #set($totalItems = $xwiki.countDocuments($countSql))
  #set($returnedItems = $items.size())
  ## ==============================================
  ## json starts
  ## ==============================================
  {
#if("$!request.sql"=="1")
  "sql" : $sql,
  "countsql" : $countSql,
#end
  "totalrows": $totalItems,
  "matchingtags": {
  #foreach($tag in $tagsMatchingFilters.keySet())
    #if($velocityCount &gt; 1) , #end
    #set($t=$tag.replaceAll('"',''))
    "$t": {}
  #end
   },
  "tags" : [
  #foreach($tag in $allMatchingTags.keySet())
    #if($velocityCount &gt; 1) , #end
    {"tag": "$tag", "count": $allMatchingTags.get($tag)}
  #end
  ],
  "returnedrows": #if($returnedItems &lt; $limit) $returnedItems #else $limit #end,
  "offset": $offset,
  "reqNo": $request.reqNo,
  "rows": [
    #foreach($item in $items)
     #set($viewable = $xwiki.hasAccessLevel("view", $context.user, "${context.database}:${item}"))
     #if($velocityCount &gt; 1) , #end
     {
      "doc_viewable" : $viewable,
      #if(!$viewable)
        "doc_fullname" : "${context.database}:${item}"
      #else
        #set($udoc = $xwiki.getDocument($item))
        #set($fullname = "${udoc.wiki}:${udoc.space}.${udoc.name}")
        #set($ok = $udoc.use($className))
        #set($itemurl = $xwiki.getURL($item))
        #set($spaceurl = $xwiki.getURL("${udoc.wiki}:${udoc.space}.WebHome"))
        #if($xwiki.isVirtualMode())
          #set($wiki = $udoc.wiki)
          #set($wikiurl = $xwiki.getURL("${udoc.wiki}:Main.WebHome"))
        #end
        #set($edit = $udoc.getURL($udoc.defaultEditMode))
        #set($copy = $xwiki.getURL("XWiki.CopyDocument", "view", "sourcedoc=${util.encodeURI($fullname)}"))
        #set($delete = $udoc.getURL("delete"))
        #set($rename = $udoc.getURL("view", "xpage=rename&amp;amp;step=1"))
        #set($rights = $udoc.getURL("edit", "editor=rights"))
        "doc_name" : "$udoc.name",
        "doc_fullname" : "$fullname",
        "doc_space" : "${udoc.space}",
        "doc_url" : "${itemurl}",
        "doc_space_url" : "${spaceurl}",
        #if($xwiki.isVirtualMode())
        "doc_wiki" : "$wiki",
        "doc_wiki_url" : "$wikiurl",
        #end
        "doc_hasadmin"  : $xwiki.hasAdminRights(),
        "doc_edit_url" : "$edit",
        "doc_copy_url"   : "$copy",
        "doc_delete_url" : "$delete",
        "doc_rename_url" : "$rename",
        "doc_rights_url" : "$rights",
        "doc_author_url" : "$xwiki.getURL($udoc.author)",
        "doc_date" : "${xwiki.formatDate($udoc.date)}",
        "doc_title" : "$xwiki.getXMLEncoded(${udoc.getDisplayTitle()})",
        "doc_author" : "${xwiki.getLocalUserName($udoc.author, false)}",
        "doc_creationDate" : "${xwiki.formatDate($udoc.creationDate)}",
        "doc_creator" : "${xwiki.getLocalUserName($udoc.creator, false)}"
        #foreach($colname in $collist)
          #if($colname.startsWith("doc."))
          #elseif($colname=="_action") ,
            #set($text = $msg.get("${request.transprefix}actiontext"))
           "${colname}" : "${text}"
          #elseif($colname=="_attachments") ,
            #grid_attachlist($udoc)
            "${colname}" : "${attachlist}"
          #elseif($colname=="_avatar") ,
            #grid_avatar($udoc)
            "${colname}" : "${avatar}"
          #elseif($colname=="_images") ,
            #grid_photolist($udoc)
            "${colname}" : "${photolist}"
          #else ,
            #set($propClassName = "")
            #set($propClassName = $request.get("${colname}_class"))
            #if($propClassName)
              #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
              #set($ok = $udoc.use($propClassName))
            #else
              #set($propClass = $class)
            #end
            ## retrieve the property type as it might be usefull
            #set($proptype = "")
            #if($listtool.contains($propClass.getPropertyNames(), $colname))
              #set($proptype = $!propClass.get($colname).type)
            #end
            #set($fieldvalue = "")
            #set($fielddisplayvalue = "")
            #set($fieldvalue = $udoc.getValue($colname))
            #set($fielddisplayvalue = $udoc.display($colname, "view"))
            ## we need to transform carriage returns to &lt;br /&gt;
            #if($proptype=="TextAreaClass")
              #set($fieldvalue = $fieldvalue.replaceAll("\r", "").replaceAll("\n","&lt;br /&gt;"))
              #set($fielddisplayvalue = $fielddisplayvalue.replaceAll("\r", "").replaceAll("\n","&lt;br /&gt;"))
            #else
              #set($fieldvalue = $fieldvalue.replaceAll("\r", "").replaceAll("\n",""))
              #set($fielddisplayvalue = $fielddisplayvalue.replaceAll("\r", "").replaceAll("\n",""))
            #end
            #if($fielddisplayvalue=="")
              #set($fielddisplayvalue = $msg.get("${request.transprefix}emptyvalue"))
            #end
            #set($fieldurl = "")
            ## only retrieve an URL for a DBListClass item
            #if($proptype=="DBListClass")
              #set($fieldurl = $xwiki.getDocument($fieldvalue).getURL())
              #if($fieldurl == "/xwiki/bin/view/Main/")
                #set($fieldurl = "")
              #end
            #end
            "${colname}" : "${fielddisplayvalue}",
            "${colname}_value" : "${fieldvalue}",
            "${colname}_url" : "${fieldurl}"
            ## reset to the default class
            #set($ok = $udoc.use($className))
          #end
        #end
      #end
     }
    #end
  ]}
  ## ==============================================
  ## json ended
  ## ==============================================
#end
#end
#macro(grid_gettablename $colname)
   #set($propClassName = "")
   #set($propClassName = $request.get("${colname}_class"))
   #if($propClassName!="")
    #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
   #else
    #set($propClass = $class)
   #end
    #set($proptype = "")
    #if($listtool.contains($propClass.getPropertyNames(), $colname))
     #set($proptype = $propClass.get($colname).type)
    #end
    #if($proptype=="NumberClass")
     #set($numberType = $propClass.get($colname).getProperty("numberType").getValue())
     #if($numberType=="integer")
      #set($tableName = "IntegerProperty")
     #elseif($numberType=="long")
      #set($tableName = "LongProperty")
     #elseif($numberType=="float")
      #set($tableName = "FloatProperty")
     #elseif($numberType=="double")
      #set($tableName = "DoubleProperty")
     #else
      #set($tableName = "LongProperty")
     #end
    #elseif($proptype=="DateClass")
      #set($tableName = "DateProperty")    
    #elseif($proptype=="TextAreaClass"||$proptype=="UsersClass"||$proptype=="GroupsClass")
      #set($tableName = "LargeStringProperty")    
    #elseif($proptype=="StaticListClass"||$proptype=="DBListClass")
     #set($multiselect = $class.get($colname).getProperty("multiSelect").getValue())
     #if($multiselect!=0)
      #set($tableName = "DBStringListProperty")    
     #else
      #set($tableName = "StringProperty")    
     #end
    #else
      #set($tableName = "StringProperty")    
    #end
#end #macro(grid_addcolumn $colname)
  #set($fieldvalue = "")
  #set($fieldvalue = $!request.get($colname))
  #set($tablealias = $colname)
  #set($proptype = "")
  #if($listtool.contains($class.getPropertyNames(), $colname))
   #set($proptype = $!class.get($colname).type)
  #end
  #if($fieldvalue &amp;&amp; $fieldvalue!="")
    #set($ok = $tablelist.add($tablealias))
    #if($proptype=="NumberClass")
     #grid_gettablename($colname)
     #set($fromSql = "${fromSql}, ${tableName} ${tablealias}")
     #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}'; and ${tablealias}.value = ${fieldvalue}")
    #elseif($proptype=="DateClass")
     #set($fromSql = "${fromSql}, DateProperty ${tablealias}")
     #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}' and upper(str(${tablealias}.value)) like upper('%${fieldvalue}%')")
    #elseif($proptype=="TextAreaClass" || $proptype=="UsersClass" || $proptype=="GroupsClass")
     #set($fromSql = "${fromSql}, LargeStringProperty ${tablealias}")
     #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}' and upper(${tablealias}.value) like upper('%${fieldvalue}%')")
    #else
     #set($fromSql = "${fromSql}, StringProperty ${tablealias}")
     #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}' and upper(${tablealias}.value) like upper('%${fieldvalue}%')")
    #end
  #end
#end
#**
 * list attachment
 *#
#macro(grid_attachlist $udoc)
   #set($attachlist = "") 
   #foreach ($attach in $udoc.attachmentList) 
    #set($attachurl = $udoc.getAttachmentURL($attach.filename,"download"))
    #set($attachlist = "${attachlist}&lt;a href='${attachurl}' &gt;$attach.filename&lt;/a&gt;&lt;br /&gt;")
   #end
  #end
#**
 * list images
 *#
#macro(grid_photolist $udoc)
   #set($photolist = "") 
   #foreach ($attach in $udoc.attachmentList) 
    #if($attach.isImage())
    #set($attachurl = $udoc.getAttachmentURL($attach.filename,"download"))
    #set($photolist = "${photolist}&lt;img src='${attachurl}' width='50' /&gt;&lt;br /&gt;")
   #end
   #end
  #end
#**
 * list images
 *#
#macro(useravatarwithwidth $username)
  #if(!$picturelist)
    #set($picturelist = $util.hashMap)
  #end
  #if(!$picturelist.containsKey($username))
    #set($picture = "&lt;img src='")
    #set($picture = $picture.concat($xwiki.getSkinFile("noavatar.png")))
    #set($picture = $picture.concat("' alt='$username' title='$username'/&gt;"))
    #set($profiledoc = $xwiki.getDocument($username))
    #if(!$profiledoc.isNew())
      #set($profileobj = $profiledoc.getObject("XWikiUsers", 0))
      #if($profiledoc.attachmentList.size() != 0)
        #set($hasavatar = 0)
        #if($profileobj.avatar &amp;&amp; $profileobj.avatar != "")
          #foreach ($attach in $profiledoc.attachmentList)
            #if($attach.filename == $profileobj.avatar)
              #set($hasavatar = 1)
            #end
          #end
        #end
        #if($hasavatar == 1)
          #set($pictureurl = $profiledoc.getAttachmentURL($profileobj.avatar))
          #set($picture = "&lt;img src='")
          #set($picture = $picture.concat($pictureurl))
          #set($picture = $picture.concat("' width='50' alt='"))
          #set($picture = $picture.concat($username))
          #set($picture = $picture.concat("' title='"))
          #set($picture = $picture.concat($username))
          #set($picture = $picture.concat("'/&gt;"))
        #end
      #end
    #end
    $!picturelist.put($username, $picture)
  #end
  $picturelist.get($username)
#end
#macro(grid_avatar $udoc)
   #set($avatar = "#useravatarwithwidth($udoc.fullName)") 
   #set($avatar = $avatar.replaceAll("\r", "").replaceAll("\n",""))
#end
#**
  * macro to extend the query with the parameter
  *#
#macro(grid_addcolumn $colname)
  #set($fieldvalue = "")
  #set($fieldvalue = $!request.get($colname))
  #if($colname=="description")
   #set($tablealias = "dtable")
  #else
   #set($tablealias = $colname)
  #end
  #set($proptype = "")
  #if($class &amp;&amp; $listtool.contains($class.getPropertyNames(), $colname))
   #set($proptype = $!class.get($colname).type)
  #end
  #if("$!fieldvalue" != "")
    #set($ok = $tablelist.add($tablealias))
    #if($colname.startsWith("doc."))
     #set($whereSql = " ${whereSql} and upper(str(${colname.replace('_','.')})) like upper('%${fieldvalue}%')")
    #elseif($proptype=="NumberClass"||$proptype=="BooleanClass")
     #grid_gettablename($colname)
     #set($fromSql = "${fromSql}, ${tableName} ${tablealias}")
     #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}' and ${tablealias}.value = ${fieldvalue}")
    #elseif($proptype=="DateClass")
     #set($fromSql = "${fromSql}, DateProperty ${tablealias}")
     #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}' and upper(str(${tablealias}.value)) like upper('%${fieldvalue}%')")
    #elseif($proptype=="TextAreaClass"||$proptype=="UsersClass"||$proptype=="GroupsClass")
     #set($fromSql = "${fromSql}, LargeStringProperty ${tablealias}")
     #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}' and upper(${tablealias}.value) like upper('%${fieldvalue}%')")
    #elseif($proptype=="StaticListClass"||$proptype=="DBListClass")
     #set($multiselect = $class.get($colname).getProperty("multiSelect").getValue())
     #if($multiselect!=0)
      #set($fromSql = "${fromSql}, DBStringListProperty ${tablealias}")
      #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}' and  '${fieldvalue}' in elements(${tablealias}.list)")
     #else
      #set($fromSql = "${fromSql}, StringProperty ${tablealias}")
      #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}' and ${tablealias}.value = '${fieldvalue}'")
     #end
    #else
     #set($fromSql = "${fromSql}, StringProperty ${tablealias}")
     #set($whereSql = " ${whereSql} and obj.id=${tablealias}.id.id and ${tablealias}.name='${colname}' and upper(${tablealias}.value) like upper('%${fieldvalue}%')")
    #end
  #end
#end
##
{{velocity}}</content>
</xwikidoc>
