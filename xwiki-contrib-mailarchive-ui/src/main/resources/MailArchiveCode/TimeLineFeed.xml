<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>MailArchiveCode</web>
<name>TimeLineFeed</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.jbousque</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1268420134000</creationDate>
<date>1339952700000</date>
<contentUpdateDate>1339952700000</contentUpdateDate>
<version>1.3</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>update</comment>
<minorEdit>true</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden><attachment>
<filename>TimeLineFeed-MailArchiver.xml</filename>
<filesize>13</filesize>
<author>XWiki.Admin</author>
<date>1339952700000</date>
<version>1.600</version>
<comment></comment><content>PGRhdGE+PC9kYXRhPg==
</content></attachment>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator>|</separator>
<separators>|,</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>MailArchiveCode.TimeLineFeed</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>fb809eee-a82c-4b9a-b0b2-dfe19e62630d</guid>
<property>
<tags/>
</property>
</object>
<object>
<class>
<name>XWiki.XWikiRights</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<allow>
<defaultValue>1</defaultValue>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>allow</displayType>
<name>allow</name>
<number>4</number>
<prettyName>Allow/Deny</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</allow>
<groups>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>groups</name>
<number>1</number>
<prettyName>Groups</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>5</size>
<unmodifiable>0</unmodifiable>
<usesList>1</usesList>
<classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
</groups>
<levels>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>levels</name>
<number>2</number>
<prettyName>Levels</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>3</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
</levels>
<users>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>users</name>
<number>3</number>
<prettyName>Users</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>5</size>
<unmodifiable>0</unmodifiable>
<usesList>1</usesList>
<classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
</users>
</class>
<name>MailArchiveCode.TimeLineFeed</name>
<number>0</number>
<className>XWiki.XWikiRights</className>
<guid>0b48ab8f-da2e-4bb1-b6c7-6dfc4ed77dec</guid>
<property>
<allow>1</allow>
</property>
<property>
<levels>edit,view,comment</levels>
</property>
<property>
<users>XWiki.XWikiGuest</users>
</property>
</object>
<content>{{groovy}}
import com.xpn.xwiki.doc.XWikiAttachment 
import java.text.SimpleDateFormat
import java.util.Date

def count=200
def curdoc = doc
def TreeMap sortedEvents = new TreeMap()
def maxstrlenght = 150
def skinurl='http://r-wikiggs.gemalto.com/xwiki/bin/download/XWiki/GSESkin'

// Utility class for mail archive
def tools = xwiki.parseGroovyFromPage('MailArchiveCode.ToolsGroovyClass')

// Set loading user in context (for rights)
def settingsDoc = xwiki.getDocument("MailArchivePrefs.GlobalParameters")
settingsDoc.use("MailArchiveCode.AdminClass")
def loadingUser = settingsDoc.getValue("user");
xwiki.context.setUser(loadingUser)

if (!curdoc.hasAccessLevel('edit', loadingUser)) {
  println "User ${loadingUser} doesn't have needed rights on ${curdoc}, exiting"
} else {

try {

    // Add Topics durations
    xwql = "select topic.name from Document doc, doc.object('MailArchiveCode.MailTopicClass') as topic order by topic.lastupdatedate desc"
    result = services.get("query").xwql(xwql).setLimit(count).execute()

    for (item in result) {
        doc = xwiki.getDocument(item)
        obj = doc.getObject("MailArchiveCode.MailTopicClass")
        if (obj != null) 
        {
            try {
                author = obj.getProperty("author").value
                subject = obj.getProperty("subject").value
                docurl = doc.space+"."+doc.name
                docshortname = subject

                date = obj.getProperty("startdate").value
                end = obj.getProperty("lastupdatedate").value
                if (date == end) {
                    // Add 10 min just to see the tape
                    end.setTime(end.getTime()+600000)
                }
                //extract = doc.display("body", "view", obj).trim()
                extract = getTopicMails(obj.topicid, subject)                
                type = obj.getProperty("type").value
                tags = ""
                if (doc.getTags().contains("GGS_WW_")) {
                    tags = "GGS_WW"
                }
                doc.getTagList().grep(~/^Community.*$/).each() {
                    if (tags == "GGS_WW") { tags = "" }
                    tags += "${it.value} "
                }
                if (type == "Mail") {
                    if (!xwiki.getDocument(doc.creator).isNew()) {
                      icon = "${xwiki.getDocument(doc.creator).getURL('download')}/ldapavatar.jpg"
                    } else {
                      icon = "${xwiki.getDocument('XWiki.XWikiUserSheet').getURL('download')}/noavatar.png"
                    }
                    action = 'Topic created'
                    sortedEvents.put(date.getTime(), '&lt;event start="'+date.toLocaleString()+'" end="'+end.toLocaleString()+'" title="'+xwiki.getXMLEncoded(docshortname)+'" icon="'+icon+'" image="'+icon+'" classname="'+tags+'" durationEvent="true" link="'+doc.getURL()+'"&gt;'+xwiki.getXMLEncoded((tags!=""?'&lt;span class="tape-'+tags+'"&gt;___&lt;/span&gt; '+ tags + '&lt;br/&gt;':'')+'&lt;br/&gt; '+action+' by '+author+'&lt;br/&gt; '+extract)+'&lt;/event&gt;')


                } else {
                    if (type == "Newsletter") {
                        action = "Newsletter posted"
                        icon = "${xwiki.getDocument('XWiki.GSESkin').getURL('download')}/667%2D2_pupils_speech.png"
                    }
                    if (type == "Product Release") {
                        action = "Product Release published"
                        icon = "http://r-wikiggs.gemalto.com/xwiki/resources/icons/silk/cd.gif"
                    }
                    link = xwiki.getDocument("MailArchive.M${doc.name[1..-1]}").getURL()
                    sortedEvents.put(date.getTime(), '&lt;event start="'+date.toLocaleString()+'" title="'+xwiki.getXMLEncoded(docshortname)+'" icon="'+icon+'" image="'+icon+'" link="'+link+'" &gt;'+xwiki.getXMLEncoded((tags!=""?'&lt;span class="tape-'+tags+'"&gt;___&lt;/span&gt; '+tags+'&lt;br/&gt;':'')+'&lt;br/&gt;'+action+' by '+author+'&lt;br/&gt; '+extract)+'&lt;/event&gt;')
                }
            } catch (Throwable t) {
                println "Exception for ${doc}: ${t}"
                println (t.getStackTrace())
            }
        }
    }



} catch (Throwable e) {
    e.printStackTrace()
    println("could not compute timeline data because of " + e)
    println(e.getStackTrace())
}


try {
    StringBuffer content = new StringBuffer()
    content.append('&lt;data&gt;')
    for (event in sortedEvents.entrySet()) {
        content.append(event.getValue()+'\n')
    }
    content.append('&lt;/data&gt;')

    curdoc.addAttachment("TimeLineFeed-MailArchiver.xml", content.toString().getBytes())
    curdoc.save("update", true)

    /*   def fw = new FileWriter("../webapps/xwiki/TimeLineFeed-MailArchiver.xml", false)
    fw.write(content.toString())
    fw.close()*/

    println("Loaded " + sortedEvents.size() + " into Timeline feed [[attach:TimeLineFeed-MailArchiver.xml]]")


} catch (Exception e) {
    println ("Exception occured"+e+e.printStackTrace())
}

}

def getTopicMails(topicid, topicsubject) {
    def returnVal = ""
    def first = true
    def xwql_topic = "select doc.fullName,doc.author,mail.date,mail.messagesubject,mail.from from Document doc, doc.object(MailArchiveCode.MailClass) as  mail where  mail.topicid='${topicid}' and doc.fullName&lt;&gt;'MailArchiveCode.MailClassTemplate' order by mail.date asc"
    def msgs = services.get("query").xwql(xwql_topic).execute()
    msgs.each { msg -&gt;        
        // formatter for formatting dates for display
        def formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm")
        def userdoc = xwiki.getDocument(msg[1])
        def user = ""
        def link = null
        if (!userdoc.isNew()) { 
          userobj = userdoc.getObject('XWiki.XWikiUsers')
          if (userobj != null) {
            user = userobj.first_name + ' ' + userobj.last_name
            link = userdoc.getURL()
          }
        } else {
          def start = msg[4].indexOf("&lt;")
          if (start != -1) { user = msg[4].substring(0,start) }
        }
        def subject = topicsubject
        if (!first) {
          subject = msg[3].replace("${topicsubject}", "...")
        } else if (topicsubject.length()&gt;20) { 
          subject = topicsubject[0..19] + "..." 
        }
        returnVal += '&lt;a href="javascript:centerTimeline('+msg[2].getTime()+');"&gt;' + formatter.format(msg[2]) + '&lt;/a&gt; - &lt;a href="' + xwiki.getDocument(msg[0]).getURL() + '"&gt;' + subject + '&lt;/a&gt; - ' + (link!=null?'&lt;a href="' + link + '"&gt;':'') + user + (link!=null?'&lt;/a&gt; ':'') + '&lt;br/&gt;'
        first = false
    }

    return returnVal

}
{{/groovy}}</content></xwikidoc>
