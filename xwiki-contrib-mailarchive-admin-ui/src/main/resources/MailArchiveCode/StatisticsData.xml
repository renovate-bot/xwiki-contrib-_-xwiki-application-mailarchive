<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>MailArchiveCode</web>
  <name>StatisticsData</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>MailArchiveCode.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1353417892000</creationDate>
  <date>1353417892000</date>
  <contentUpdateDate>1353417892000</contentUpdateDate>
  <version>1.1</version>
  <title>Export of Statistics Data about MailArchiver mails and topics</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.TagClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <tags>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>tags</name>
        <number>1</number>
        <prettyName>Tags</prettyName>
        <relationalStorage>1</relationalStorage>
        <separator>|</separator>
        <separators>|,</separators>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <values/>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </tags>
    </class>
    <name>MailArchiveCode.StatisticsData</name>
    <number>0</number>
    <className>XWiki.TagClass</className>
    <guid>3bd86714-5c07-449d-8937-f1a4de99024d</guid>
    <property>
      <tags/>
    </property>
  </object>
  <content>{{velocity}}
$context.setCacheDuration(60)
{{/velocity}}

{{groovy}}
import java.text.SimpleDateFormat
import java.util.Date

// Globals
def sdf = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss")
def threadsMap = [:]

// Params
def format = request.getParameter("format")
if (format == null || format.isEmpty()) {
   format = "text"
}

/* // Dates useless for now ...
// Manage date input params
def startDateString = request.getParameter("startDate")
def endDateString = request.getParameter("endDate")
def sdf = new SimpleDateFormat("MMyyyy")
def startDate = null
def endDate = null
// Check dates
if (startDateString != null &amp;&amp; !startDateString.isEmpty()) {
   startDate = sdf.parse(startDateString)
}
if (endDateString != null &amp;&amp; !endDateString.isEmpty()) {
   endDate = sdf.parse(endDateString)
}
if (startDate == null) {
   startDate = sdf.parse("011977")
}
if (endDate == null) {
println "endDate is null"
   endDate == new Date()
println "$endDate"
}
// debug
println "$startDate $endDate"
*/

// Loop on all months

def sql = """select obj.id,propDate.value,propFrom.value,tag,proptopic.value,proptype.value
           from BaseObject as obj,
                BaseObject as objtag,
                DateProperty as propDate,
                LargeStringProperty as propFrom,
                DBStringListProperty as proptag join proptag.list as tag,
                StringProperty as proptopic,
                StringProperty as proptype
          where obj.className='MailArchiveCode.MailClass' 
                and obj.name!='MailArchiveCode.MailTemplate' 
                and obj.id=propDate.id and propDate.name='date'
                and obj.id=propFrom.id and propFrom.name='from'
                and objtag.className='XWiki.TagClass' and objtag.id=proptag.id.id and proptag.id.name='tags' and objtag.name=obj.name
                and obj.id=proptopic.id and proptopic.name='topicsubject'
                and obj.id=proptype.id and proptype.name='type'
       order by propDate desc"""
//                and proptype.name='type' and proptype.id=obj.id and proptype.value='Mail' """

def results = xwiki.search(sql, 0, 0)

if (results.size() &gt; 0) {
  if (format == "text") {
      println "{{{"
    println "Id,Date,From,DL,Topic,Type"
  } else {
    println "{{html wiki=\"false\"}}"
    println "&lt;table&gt;&lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;th&gt;From&lt;/th&gt;&lt;th&gt;DL&lt;/th&gt;&lt;th&gt;Topic&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;/tr&gt;"
  }
  results.each() { result -&gt;
     topic = result[4].replaceAll('\n',"").replaceAll('\r',"").replaceAll("&amp;amp;","&amp;").replaceAll("&amp;gt;","&gt;").replaceAll("&amp;lt;","&lt;")
     from = result[2].replaceAll('\n',"").replaceAll('\r',"").replaceAll("&amp;amp;","&amp;").replaceAll("&amp;gt;","&gt;").replaceAll("&amp;lt;","&lt;")
     if (format == "text") {
       println "\"${result[0]}\",\"${result[1]}\",\"${from}\",\"${result[3]}\",\"${topic}\",\"${result[5]}\""
     } else {
       println "&lt;tr&gt;&lt;td&gt;${result[0]}&lt;/td&gt;&lt;td&gt;${result[1]}&lt;/td&gt;&lt;td&gt;${from}&lt;/td&gt;&lt;td&gt;${result[3]}&lt;/td&gt;&lt;td&gt;${topic}&lt;/td&gt;&lt;td&gt;${result[5]}&lt;/td&gt;&lt;/tr&gt;"
     }
  }
  if (format == "html") {
     println "&lt;/table&gt;"
     println "{{/html}}"
  } else {
     println "}}}"
  }
}



{{/groovy}}
</content>
</xwikidoc>
